component EHMCell
    % Battery EHM
    % An Equivalent Hydraulic Model of a lithium-ion battery cell.
    % Models the electrodes and electrolyte distrbuted voltage losses.
    
    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end
    
    % Annotate port/output locations
    annotations
        p: Side = top;                  % +ve electrode terminal
        n: Side = bottom;               % -ve electrode terminal
        
        % Parameter tabs
        UILayout = [
            UIGroup("Init",V0,CI)
            UIGroup("Geometrics",epsilon_s_n,epsilon_s_p)
            UIGroup("Concentrations",n_Li_s)
            UIGroup("Transport",D_s_n0)
            UIGroup("Kinetics",R_f_n,R_f_p,R_c)];
        Icon = 'icon/EHMCell.png';
    end
    
    parameters
        % Initialisation Params
        V0 = {3.5,'V'}; %Initial terminal voltage
        CI = {0.0235070507454338,'1'}; %Initial cond for SOC and CSC

        % Geometric Params
        epsilon_s_n = 0.6;     % Volume fraction in solid for neg. electrode
        epsilon_s_p = 0.5;     % Volume fraction in solid for pos. electrode

        % Concentrations
        n_Li_s = {2.5,'mol'};        % Total moles of lithium in solid phase

        % Transport Params
        D_s_n0 = {3.9e-14,'m^2/s'};  % Diffusion coeff for solid in neg. electrode

        % Kinetic Params
        R_f_n = {1e-3,'m^4*kg/s^3/A^2'};   % Resistivity of SEI layer neg. electrode
        R_f_p = {0,'m^4*kg/s^3/A^2'};      % Resistivity of SEI layer pos. electrode
        R_c = {0,'m^4*kg/s^3/A^2'};        % Contact Resistance/Current Collector Resistance
               
    end
    
    
    parameters (Access = Protected)
        Faraday = {96487, 's*A/mol'};   % Faraday constant
        R = {8.314472, 'J/K/mol'};      % Universal gas constant

        Ts = {1,'s'}; %discretisation param

        % Geometric params 
        A_e = {0.045945566460206,'m^2'};   % Electrode area

        L_n = {100e-6,'m'};          % Thickness of negative electrode
        L_p = {100e-6,'m'};          % Thickness of positive electrode
        L_s = {25e-6,'m'};           % Thickness of separator

        L_ccn = {25e-6,'m'};         % Thickness of negative current collector
        L_ccp = {25e-6,'m'};         % Thickness of positive current collector

        R_s_n = {10e-6,'m'};         % Radius of solid particles in negative electrode
        R_s_p = {10e-6,'m'};         % Radius of solid particles in positive electrode

        epsilon_e_n = 0.3;     % Volume fraction in electrolyte for neg. electrode
        epsilon_e_p = 0.3;     % Volume fraction in electrolyte for pos. electrode
        epsilon_e_s = 1.0;     % Volume fraction in electrolyte for separator
        epsilon_f_n = 0.1;     % Volume fraction of filler in neg. electrode
        epsilon_f_p = 0.2;     % Volume fraction of filler in pos. electrode

        rho_sn = {1800,'kg/m^3'};    % Solid phase in negative electrode
        rho_sp = {5010,'kg/m^3'};    % Solid phase in positive electrode
        rho_e =  {1324,'kg/m^3'};    % Electrolyte
        rho_f = {1800,'kg/m^3'};     % Filler
        rho_ccn = {8954,'kg/m^3'};   % Current collector in negative electrode
        rho_ccp = {2707,'kg/m^3'};   % Current collector in positive electrode
        % Specific interfacial surface area
        a_s_n = 3*epsilon_s_n / R_s_n;  % Negative electrode [m^2/m^3]
        a_s_p = 3*epsilon_s_p / R_s_p;  % Positive electrode [m^2/m^3]
        % Compute cell mass [kg/m^2]
        m_n = L_n * (rho_e*epsilon_e_n + rho_sn*epsilon_s_n + rho_f*epsilon_f_n);
        m_s = L_s * (rho_e*epsilon_e_n);
        m_p = L_p * (rho_e*epsilon_e_p + rho_sp*epsilon_s_p + rho_f*epsilon_f_p);
        m_cc = rho_ccn*L_ccn + rho_ccp*L_ccp;
        % Lumped density [kg/m^2]
        rho_avg = m_n + m_s + m_p + m_cc;

        % Transport params
        D_s_p0 = {1e-13,'m^2/s'};    % Diffusion coeff for solid in pos. electrode

        dactivity = 0;         % Diffusional conductivity in electrolyte
        brug = 1.5;            % Bruggeman porosity

        sig_n = {100,'s^3*A^2/m/kg'};    % Conductivity of solid in neg. electrode
        sig_p = {10,'s^3*A^2/m/kg'};     % Conductivity of solid in pos. electrode

        t_plus = 0.4;          % Transference number 

        % Kinetic params
        alpha = 0.5;           % Charge transfer coefficients

        k_n0 = {1e-5,'A*m^(5/2)/mol^(3/2)'};  % Reaction rate in neg. electrode
        k_p0 = {3e-7,'A*m^(5/2)/mol^(3/2)'};  % Reaction rate in pos. electrode

        % Concentrations
        c_s_n_max = {3.6e3 * 372 * 1800 / 96487,'mol/m^3'};   % Max concentration in anode
        c_s_p_max = {3.6e3 * 274 * 5010 / 96487,'mol/m^3'};   % Max concentration in cathode
        c_e = {1e3,'mol/m^3'};       % Fixed electrolyte concentration for SPM

        % Thermodynamic Params
        C_p = {2000,'J/kg/K'};       % Heat capacity
        h = {0.36,'W/K/m^2'};        % Heat transfer coefficient

        T_amb = {298.15,'K'};

        E_kn = {37.48e3,'J/mol'};    % Activation energies
        E_kp = {39.57e3,'J/mol'};
        E_Dsn = {42.77e3,'J/mol'};
        E_Dsp = {18.55e3,'J/mol'};
        E_De = {37.04e3,'J/mol'};
        E_kappa_e = {34.70e3,'J/mol'};

        T_ref = {298.15,'K'};

        % Cutoff voltages
        volt_min = {3.105,'V'};
        volt_max = {4.5,'V'};
     
        %autre
        nu = -0.585340268368373; % SOC+ = nu*SOC- + mu
        miu = 0.976220713479772;
        %Facteur entre l'entrÃ©e u (= -3*J/(p.R_s_n * p.c_s_n_max)) et le courant I (J = I/(p.Faraday * p.a_s_n * p.L_n))
        %molar flux J = I/(p.Faraday * p.a_s_n * p.L_n) --> equation 40 de Chaturvedi (ref initiale sur modele electrochimique)
        aa0ne = -3 / (R_s_n * L_n * a_s_n * Faraday * c_s_n_max); %{-6.914022744369221e-06,'1/A'};
        aa1n = - (2*R_s_n) /(7 * D_s_n0 * L_n * a_s_n * Faraday * c_s_n_max); 
        bb1n = 1;
        bb2n = R_s_n^2 / (35*D_s_n0);
        Beta = 0.7; %1 - bb2n*aa0ne/aa1n;
        gnh  = aa0ne/aa1n - bb2n*aa0ne^2/aa1n^2; %g
        
    end

    variables (Access = Protected)
        batteryCurrent = {0,'A'}; % Current
        batteryVoltage = V0; % Terminal voltage
    end

    outputs
        SOCn = CI; % SOC(-)
        CSCn = CI; % CSC(-)
    end
    
    branches
        batteryCurrent : p.i -> n.i;
    end

    intermediates 
        im = batteryCurrent/(A_e); %[A/m^2]

        % intermediates for overpotentials
        a = R*T_ref/(alpha*Faraday);
        b_p = -im/(2*a_s_p*L_p); %A/m^2
        c_p = k_p0*c_s_p_max*sqrt(c_e);
        b_n = im/(2*a_s_n*L_n);
        c_n = k_n0*c_s_n_max*sqrt(c_e);
    end
    
    equations
        SOCn.der == aa0ne * im;
        CSCn.der == gnh/Beta/(1-Beta)*(SOCn-CSCn) + aa0ne/(1-Beta)*im;
        assert(SOCn<=1);
        assert(SOCn>=0);
        assert(CSCn<=1);
        assert(CSCn>=0);
        let 
            SOCp = nu * SOCn + miu;
            CSCp = SOCp;

            % overpotentials
            eta_p = a*log(b_p/(c_p*(CSCp*(1-CSCp))^alpha) + sqrt((b_p/(c_p*(CSCp*(1-CSCp))^alpha))^2 + 1)); % asinh = ln(x+sqrt(x^2+1))
            eta_n = a*log(b_n/(c_n*(CSCn*(1-CSCn))^alpha) + sqrt((b_n/(c_n*(CSCn*(1-CSCn))^alpha))^2 + 1));

            % potentials tanh = (exp(2*x) - 1) / (exp(2*x) + 1)
            Un = (0.194+1.5*exp(-120.0*CSCn) ...
             +0.0351*tanh((CSCn-0.286)/0.083) ... 
             - 0.0045*tanh((CSCn-0.849)/0.119) ...
             - 0.035*tanh((CSCn-0.9233)/0.05) ...
             - 0.0147*tanh((CSCn-0.5)/0.034) ...
             - 0.102*tanh((CSCn-0.194)/0.142) ...
             - 0.022*tanh((CSCn-0.9)/0.0164) ...
             - 0.011*tanh((CSCn-0.124)/0.0226) ...
             + 0.0155*tanh((CSCn-0.105)/0.029))*{1,'V'};
            Up = (2.16216+0.07645*tanh(30.834-54.4806*CSCp) ...
             + 2.1581*tanh(52.294-50.294*CSCp) ...
             - 0.14169*tanh(11.0923-19.8543*CSCp) ...
             + 0.2051*tanh(1.4684-5.4888*CSCp) ...
             + 0.2531*tanh((-CSCp+0.56478)/0.1316) ...
             - 0.02167*tanh((CSCp-0.525)/0.006))*{1,'V'};            
        in 
            batteryVoltage == eta_p - eta_n + Up - Un + (R_f_p/(L_p*a_s_p)-R_f_n/(L_n*a_s_n))*im;
            assert(batteryVoltage>=volt_min);
            assert(batteryVoltage<=volt_max);
            batteryVoltage == p.v - n.v;
        end
    end
  
    
end